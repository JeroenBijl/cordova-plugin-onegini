/*
 * Copyright (c) 2017 Onegini B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'

def pluginSDKiOSDir = 'OneginiSDKiOS'
def headersDir = pluginSDKiOSDir + '/Headers'
def fidoPluginExtras = new File('../../../cordova-plugin-onegini-fido/src/ios/build.gradle')

buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
  }
}

allprojects {
  repositories {
    mavenLocal()
    mavenCentral()

    maven {
      url "https://repo.onegini.com/artifactory/public"
      credentials {
        if (project.hasProperty('artifactory_user') && project.hasProperty('artifactory_password')) {
          username artifactory_user
          password artifactory_password
        } else {
          throw new InvalidUserDataException("You must configure the 'artifactory_user' and 'artifactory_password' properties in your project before you can " +
              "build it.")
        }
      }
    }
  }
}

configurations {
  sdk
  fido
}

dependencies {
  sdk 'com.onegini.mobile.sdk.ios:libOneginiSDKiOS:6.1.6@a'
  sdk 'com.onegini.mobile.sdk.ios:libOneginiSDKiOS:6.1.6:headers@zip'

  fido 'com.onegini.mobile.sdk.ios:libOneginiSDKiOSFIDO:6.1.6@a'
  fido 'com.onegini.mobile.sdk.ios:libOneginiSDKiOSFIDO:6.1.6:headers@zip'
}

task prepareTargetDirectory {
  doLast{
    delete fileTree(dir: pluginSDKiOSDir)
    file(pluginSDKiOSDir).mkdirs()
    file(headersDir).mkdirs()
  }
}

task downloadLibs(type: Copy, dependsOn: prepareTargetDirectory) {
  into(pluginSDKiOSDir)
  if (fidoPluginExtras.exists()) {
    from configurations.fido
  } else {
    from configurations.sdk
  }

  exclude('*.zip')
  rename('libOneginiSDKiOS(.*)-(.*).a$', "libOneginiSDKiOS.a")
}

task resolveDependencies(type: Copy, dependsOn: downloadLibs) {
  def headersPackage

  if (fidoPluginExtras.exists()) {
    configurations.fido.each {
      if (it.name.endsWith(".zip")) {
        headersPackage = it.absoluteFile
      }
    }
  } else {
    configurations.sdk.each {
      if (it.name.endsWith(".zip")) {
        headersPackage = it.absoluteFile
      }
    }
  }

  from zipTree(headersPackage)
  into headersDir
  exclude '*.zip'
}
